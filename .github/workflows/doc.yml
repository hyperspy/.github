name: Build documentation

on:
  workflow_call:
    inputs:
      doc_path:
        description: 'The path to the folder containing the doc'
        default: './doc'
        type: string
      doc_build_path:
        description: 'The path to the folder containing the build of the doc'
        default: './doc/_build/html/'
        type: string
      install_dependencies_only:
        description: 'Only install dependencies listed in `requirement.txt` using pip'
        default: false
        type: boolean
      pip_extra_doc:
        description: 'The name of the pip extra to install the doc'
        default: 'doc'
        type: string
      install_package_ubuntu:
        description: 'Packages to install in ubuntu'
        default: ''
        type: string
      doctest:
        description: 'Run doctest'
        default: false
        type: boolean
      use_xvfb:
        description: 'Whether to install and setup xvfb and pyqt for build the documentation'
        # if empty string, the current repository name is used
        default: false
        type: boolean
      SPHINXOPTS:
        description: 'SPHINOPTS argument passed to make html'
        default: "-W --keep-going"
        type: string
      check_links:
        description: 'Whether to check the links in the documentation'
        default: true
        type: boolean
      ORGANISATION:
        description: 'The organisation hosting the upstream code'
        default: 'hyperspy'
        type: string  
      CACHE_GALLERY_EXAMPLES:
        description: 'The path to cache for the documentation build. Useful to speed up documentation build.'
        default: ''  # './doc/auto_examples'
        type: string  
      CACHE_POOCH:
        description: 'The name of the library to cache the pooch data, see pooch.os_cache() for more details. 
                      The default pooch cache (pooch.os_cache("pooch")) will also be cached.
                      If empty (default), no caching is performed.'
        default: ''
        type: string  


jobs:
  build:
    # This build is to make PR comments for the sphinx warning and check if
    # web links are not broken 
    name: Check links and make PR comments
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get repository name
        run: |
          echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Fetch tags upstream
        if: ${{ github.repository_owner != inputs.ORGANISATION }}
        # Needs to fetch the tags from upstream to get the
        # correct version with setuptools_scm
        run: |
          git remote add upstream https://github.com/${{ inputs.ORGANISATION }}/${{ env.REPOSITORY_NAME }}.git
          git fetch upstream --tags

      - name: Cache pip
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-doc_build-pip-${{ env.CACHE_NUMBER }}
          restore-keys: |
            ${{ runner.os }}-doc_build-pip-${{ env.CACHE_NUMBER }}


      - name: Install package in Ubuntu
        if: ${{ inputs.install_package_ubuntu }}
        run : |
          sudo apt-get update
          sudo apt-get install ${{ inputs.install_package_ubuntu }}

      - name: Install Ubuntu packages for Qt
        if: ${{ inputs.use_xvfb }}
        run: |
          sudo apt-get update
          sudo apt-get install qtbase5-dev
          sudo apt-get install libxkbcommon-x11-0
          sudo apt-get install libxcb-icccm4
          sudo apt-get install libxcb-image0
          sudo apt-get install libxcb-keysyms1
          sudo apt-get install libxcb-randr0
          sudo apt-get install libxcb-render-util0
          sudo apt-get install libxcb-xinerama0
          sudo apt-get install xvfb

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.12'

      - name: Install library
        if: ${{ inputs.install_dependencies_only != true }}
        run: |
          pip install .'[${{ inputs.pip_extra_doc }}]' colorama

      - name: Install dependencies
        if: ${{ inputs.install_dependencies_only }}
        run: |
          pip install -r requirements.txt

      - name: Cache doc build
        if: ${{ inputs.CACHE_GALLERY_EXAMPLES }}
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: ${{ inputs.CACHE_GALLERY_EXAMPLES }}
          key: ${{ runner.os }}-doc_build-gallery-${{ env.CACHE_NUMBER }}
          restore-keys: |
            ${{ inputs.CACHE_GALLERY_EXAMPLES }}

      - name: Display content of the cached doc build folder
        if: ${{ inputs.CACHE_GALLERY_EXAMPLES }}
        run: |
            if [ -d "${{ inputs.CACHE_GALLERY_EXAMPLES }}" ]; then
              echo "Content of the cached doc build folder:"
              ls -l ${{ inputs.CACHE_GALLERY_EXAMPLES }}
            else
              echo "Doc build folder does not exist (yet?): ${{ inputs.CACHE_GALLERY_EXAMPLES }}"
            fi

      - name: Get pooch cache paths
        if: ${{ inputs.CACHE_POOCH != '' }}
        run: |
          # create list of pooch cache paths as a string (space separated)
          python -c "import pooch; print(' '.join([str(pooch.os_cache('${{ inputs.CACHE_POOCH }}')), str(pooch.os_cache('pooch'))]))" > pooch_cache_paths.txt
          echo "POOCH_CACHE_PATHS=$(cat pooch_cache_paths.txt)" >> $GITHUB_ENV

      - name: Cache pooch
        if: ${{ inputs.CACHE_POOCH != ''}}
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: ${{ env.POOCH_CACHE_PATHS }}
          key: ${{ runner.os }}-doc_build-pooch-${{ env.CACHE_NUMBER }}
          restore-keys: |
            ${{ runner.os }}-doc_build-pooch-${{ env.CACHE_NUMBER }}

      - name: Run doctest
        if: ${{ inputs.doctest }}
        run: |
          cd ${{ inputs.doc_path }}
          pytest --doctest-modules --doctest-glob="*.rst" -n 2 -v

      # Add sphinx warnings as PR comments
      - uses: sphinx-doc/sphinx-problem-matcher@master

      - name: Build documentation
        if: ${{ inputs.use_xvfb != true }}
        env:
          FORCE_COLOR: 1
        run: |
          cd ${{ inputs.doc_path }}
          make SPHINXOPTS="${{ inputs.SPHINXOPTS }}" html

      - name: Build documentation (with xvfb)
        if: ${{ inputs.use_xvfb }}
        env:
          FORCE_COLOR: 1
        run: |
          cd ${{ inputs.doc_path }}
          xvfb-run make SPHINXOPTS="${{ inputs.SPHINXOPTS }}" html

      - uses: actions/upload-artifact@v4
        with:
          path: ${{ inputs.doc_build_path }}
          name: doc_html

      - name: Check links
        if: ${{ inputs.check_links }}
        env:
          FORCE_COLOR: 1
        run: |
          cd ${{ inputs.doc_path }}
          make linkcheck
