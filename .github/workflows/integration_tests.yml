name: Integration tests

on:
  workflow_call:
    inputs:
      EXTENSIONS:
        description: 'The list of extension to test.'
        default: 'exspy holospy lumispy hyperspy-gui-ipywidgets hyperspy-gui-traitsui'
        type: string
      EXTENSION_VERSION:
        description: 'The version of the extension to test. It can be "release" or "dev".'
        default: 'release'
        type: string
      HYPERSPY_VERSION:
        description: 'The version of the hyperspy to test. It can be "release", "RnM" or "RnP".'
        default: 'release'
        type: string
      ROSETTASCIIO_VERSION:
        description: 'The version of the rosettasciio to test. It can be "release" or "dev".'
        default: 'release'
        type: string
      INSTALL_SOURCE_FROM_REPOSITORY:
        description: 'Whether to install the source code of the current repository.'
        default: true
        type: boolean
      USE_CONDA:
        description: 'Whether to use conda to install the packages. Set to "false" to use pip.'
        default: false
        type: boolean
      ADDITIONAL_PACKAGES:
        description: 'List of additional packages to install.'
        default: ''
        type: string
      NUMBA_DEV:
        description: 'Whether to install the numba development version.'
        default: false
        type: boolean
      DEPENDENCIES_PRE_RELEASE:
        description: 'List of dependencies to install pre-release installed with packages from pypi.org.'
        default: '' # e.g. matplotlib scipy scikit-learn sympy h5py scikit-image numba
        type: string
      DEPENDENCIES_DEV:
        # Dev version from https://anaconda.org/scientific-python-nightly-wheels/
        description: 'List of dependencies to install from scientific-python-nightly-wheels.'
        default: '' # e.g. matplotlib scipy scikit-learn sympy h5py scikit-image 
        type: string
      PLATFORM:
        description: 'The platform to run the tests on.'
        default: 'ubuntu-latest'
        type: string
      PIP_EXTRAS:
        description: 'Optional “variants” (also called extra) to be installed for the source of the current repository'
        # if empty string, no argument is passed
        default: ''
        type: string
      CACHE_POOCH:
        description: 'The list of pooch cache to cache - see pooch.os_cache() for more information.'
        default: 'kikuchipy pyxem'
        type: string

jobs:
  integration_test:
    runs-on: ${{ inputs.PLATFORM }}
    defaults:
      run:
        shell: bash -el {0}
    env:
      MPLBACKEND: agg
      TEST_DEPS: pytest pytest-xdist pytest-rerunfailures pytest-instafail pytest-mpl filelock
      PYTHON_VERSION: '3.12'
    steps:
      - uses: actions/checkout@v4
        with: 
          fetch-depth: 0
          fetch-tags: true

      - name: Get repository name
        run: |
          echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Fetch tags upstream
        if: ${{ github.repository_owner != 'hyperspy' }}
        run: |
          git remote add upstream https://github.com/hyperspy/${{ env.REPOSITORY_NAME }}.git
          git fetch upstream --tags

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          python-version: ${{ env.PYTHON_VERSION }}
          activate-environment: "test"
          conda-remove-defaults: "true"

      - name: Install pip and test dependencies
        run: |
          conda install pip ${{ env.TEST_DEPS }} 

      - name: Cache pip
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-integration-pip-${{ env.CACHE_NUMBER }}
          restore-keys: |
            ${{ runner.os }}-integration-pip-${{ env.CACHE_NUMBER }}

      - name: Cache conda
        if: ${{ inputs.USE_CONDA }}
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-integration-conda-${{ env.CACHE_NUMBER }}
          restore-keys: |
            ${{ runner.os }}-integration-conda-${{ env.CACHE_NUMBER }}

      - name: Conda info
        run: |
          conda info
          conda list

      - name: Install additional packages
        if: ${{ inputs.ADDITIONAL_PACKAGES != '' }}
        run: |
          if [[ "${{ inputs.USE_CONDA }}" == "true" ]]; then
            conda install ${{ inputs.ADDITIONAL_PACKAGES }}
          else
            pip install ${{ inputs.ADDITIONAL_PACKAGES }}
          fi

      - name: Install numba development version
        if: ${{ inputs.NUMBA_DEV }}
        run: |
          mamba install -c numba/label/dev numba

      - name: Install dependencies pre-release version
        if: ${{ inputs.DEPENDENCIES_PRE_RELEASE }}
        run: |
          pip install --upgrade --pre ${{ inputs.DEPENDENCIES_PRE_RELEASE }}

      - name: Install dependencies development version
        if: ${{ inputs.DEPENDENCIES_DEV }}
        run: |
          pip install --upgrade --pre --extra-index-url \
          https://pypi.anaconda.org/scientific-python-nightly-wheels/simple \
          ${{ inputs.DEPENDENCIES_DEV }}

      - name: Get the number of CPUs
        id: cpus
        run: |
          import os, platform
          num_cpus = os.cpu_count()
          print(f"Number of CPU: {num_cpus}")
          print(f"Architecture: {platform.machine()}")
          output_file = os.environ["GITHUB_OUTPUT"]
          with open(output_file, "a", encoding="utf-8") as output_stream:
              output_stream.write(f"count={num_cpus}\n")
        shell: python

      - name: Set pytest options
        shell: bash
        run: |
          PYTEST_ARGS="--reruns 3 -n ${{ steps.cpus.outputs.count }}"
          echo "PYTEST_ARGS=${PYTEST_ARGS}" >> $GITHUB_ENV

      - name: Install astra-toolbox and test dependencies
        if: ${{ contains(inputs.EXTENSIONS, 'etspy') }}
        run: |
          # astra-toolbox is an etspy dependency
          # install ffmpeg until test is skipped if not installed
          conda install astra-toolbox ffmpeg

      - name: Install extensions (release)
        if: ${{ contains(inputs.EXTENSION_VERSION, 'release') }}
        run: |
          if [[ "${{ inputs.USE_CONDA }}" == "true" ]]; then
            conda install ${{ inputs.EXTENSIONS }}
          else
            pip install ${{ inputs.EXTENSIONS }}
          fi

      - name: Conda list
        run: |
          conda list

      - name: Install HyperSpy (${{ inputs.HYPERSPY_VERSION }})
        if: ${{ env.REPOSITORY_NAME != 'hyperspy' }}
        run: |
          if [[ "${{ inputs.HYPERSPY_VERSION }}" == "release" ]]; then
            if [[ "${{ inputs.USE_CONDA }}" == "true" ]]; then
              conda install hyperspy
            else
              pip install "hyperspy[all]"
            fi
          elif [[ "${{ inputs.HYPERSPY_VERSION }}" == "RnM" ]]; then
            pip install "hyperspy[all] @ git+https://github.com/hyperspy/hyperspy.git@RELEASE_next_minor"
          elif [[ "${{ inputs.HYPERSPY_VERSION }}" == "RnP" ]]; then
            pip install "hyperspy[all] @ git+https://github.com/hyperspy/hyperspy.git@RELEASE_next_patch"
          else
            echo "Unknown HYPERSPY_VERSION: ${{ inputs.HYPERSPY_VERSION }}"
            exit 1
          fi

      - name: Install RosettaSciIO (${{ inputs.ROSETTASCIIO_VERSION }})
        if: ${{ env.REPOSITORY_NAME != 'rosettasciio' }}
        run: |
          if [[ "${{ inputs.ROSETTASCIIO_VERSION }}" == "release" ]]; then
            if [[ "${{ inputs.USE_CONDA }}" == "true" ]]; then
              conda install rosettasciio
            else
              pip install "rosettasciio[all]"
            fi
          elif [[ "${{ inputs.ROSETTASCIIO_VERSION }}" == "dev" ]]; then
            pip install "rosettasciio[all] @ git+https://github.com/hyperspy/rosettasciio.git"
          else
            echo "Unknown ROSETTASCIIO_VERSION: ${{ inputs.ROSETTASCIIO_VERSION }}"
            exit 1
          fi

      - name: Install Extension (dev)
        if: ${{ inputs.EXTENSION_VERSION == 'dev' }}
        run: |
          for ext in $(echo "${{ inputs.EXTENSIONS }}" | tr ' ' '\n'); do
            if [[ "$ext" == "exspy" && "${{ env.REPOSITORY_NAME }}" != "exspy" ]]; then
              pip install "exspy @ git+https://github.com/hyperspy/exspy.git"
            elif [[ "$ext" == "holospy" && "${{ env.REPOSITORY_NAME }}" != "holospy" ]]; then
              pip install "holospy @ git+https://github.com/hyperspy/holospy.git"
            elif [[ "$ext" == "hyperspy-gui-ipywidgets" && "${{ env.REPOSITORY_NAME }}" != "hyperspy_gui_ipywidgets" ]]; then
              pip install "hyperspy-gui-ipywidgets @ git+https://github.com/hyperspy/hyperspy_gui_ipywidgets.git"
            elif [[ "$ext" == "hyperspy-gui-traitsui" && "${{ env.REPOSITORY_NAME }}" != "hyperspy_gui_traitsui" ]]; then
              pip install "hyperspy-gui-traitsui @ git+https://github.com/hyperspy/hyperspy_gui_traitsui.git"
            elif [[ "$ext" == "lumispy" && "${{ env.REPOSITORY_NAME }}" != "lumispy" ]]; then
              pip install "lumispy @ git+https://github.com/lumispy/lumispy.git"
            elif [[ "$ext" == "pyxem" && "${{ env.REPOSITORY_NAME }}" != "pyxem" ]]; then
              pip install "pyxem @ git+https://github.com/pyxem/pyxem.git"
            elif [[ "$ext" == "kikuchipy" && "${{ env.REPOSITORY_NAME }}" != "kikuchipy" ]]; then
              pip install "kikuchipy @ git+https://github.com/pyxem/kikuchipy.git"
            elif [[ "$ext" == "atomap" && "${{ env.REPOSITORY_NAME }}" != "atomap" ]]; then
              # pip install "atomap @ git+https://github.com/atomap-dev/atomap.git"
              # https://github.com/atomap-dev/atomap/pull/2
              pip install "atomap @ git+https://github.com/ericpre/atomap.git@fix_packaging"
            elif [[ "$ext" == "etspy" && "${{ env.REPOSITORY_NAME }}" != "etspy" ]]; then
              pip install "etspy @ git+https://github.com/usnistgov/etspy.git"
            else
              echo "Unknown extension: $ext"
              exit 1
            fi
          done

      - name: Conda list
        run: |
          conda list

      - name: Install ${{ env.REPOSITORY_NAME }} (local)
        if: ${{ inputs.INSTALL_SOURCE_FROM_REPOSITORY }}
        working-directory: ${{ github.workspace }}
        run: |
          pip install -e .${{ inputs.PIP_EXTRAS }}

      - name: Get pooch cache paths
        if: ${{ inputs.CACHE_POOCH != '' }}
        run: |
          # create list of pooch cache paths as a string (space separated)
          python -c "import pooch; print(' '.join([str(pooch.os_cache(s)) for s in '${{ inputs.CACHE_POOCH }}'.split(' ')]))" > pooch_cache_paths.txt
          echo "POOCH_CACHE_PATHS=$(cat pooch_cache_paths.txt)" >> $GITHUB_ENV

      - name: Cache pooch data
        if: ${{ inputs.CACHE_POOCH != '' }}
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: ${{ env.POOCH_CACHE_PATHS }}
          key: ${{ runner.os }}-integration-pooch-${{ env.CACHE_NUMBER }}
          restore-keys: |
            ${{ runner.os }}-integration-pooch-${{ env.CACHE_NUMBER }}

      - name: Conda list
        run: |
          conda list

      - name: Get rosettasciio tests data location
        if: ${{ env.REPOSITORY_NAME != 'rosettasciio' }} # only for repositories that are not rosettasciio
        run: |
          python -c "from rsciio.tests import registry; print(f'ROSETTASCIIO_TEST_DATA={str(registry.TESTS_PATH / \"data\") }')" >> $GITHUB_ENV

      - name: Cache rosettasciio data
        if: ${{ env.REPOSITORY_NAME != 'rosettasciio' }} # only for repositories that are not rosettasciio
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: ${{ env.ROSETTASCIIO_TEST_DATA }}
          key:
            ${{ runner.os }}-integration-rosettasciio-${{ env.CACHE_NUMBER }}
          restore-keys: |
            ${{ runner.os }}-integration-rosettasciio-${{ env.CACHE_NUMBER }}

      - name: Run HyperSpy Test Suite
        if: ${{ always() }}
        working-directory: ${{ runner.temp }}
        run: |
          python -m pytest --pyargs hyperspy ${{ env.PYTEST_ARGS }}

      - name: Run RosettaSciIO Test Suite
        if: ${{ always() }}
        working-directory: ${{ runner.temp }}
        run: |
          # mrcz and pyusid doesn't support numpy 2
          python -m pytest --pyargs rsciio ${{ env.PYTEST_ARGS }} -k "not test_mrcz.py and not test_usid.py"

      - name: Run LumiSpy Test Suite
        if: ${{ always() && contains(inputs.EXTENSIONS, 'lumispy')}}
        working-directory: ${{ runner.temp }}
        run: |
          python -m pytest --pyargs lumispy

      - name: Run hyperspy_gui_ipywidgets Test Suite
        if: ${{ always() && contains(inputs.EXTENSIONS, 'hyperspy-gui-ipywidgets') }}
        working-directory: ${{ runner.temp }}
        run: |
          python -m pytest --pyargs hyperspy_gui_ipywidgets

      - name: Run hyperspy_gui_traitsui Test Suite
        if: ${{ always() && contains(inputs.EXTENSIONS, 'hyperspy-gui-traitsui') }}
        working-directory: ${{ runner.temp }}
        run: |
          python -m pytest --pyargs hyperspy_gui_traitsui

      - name: Run Pyxem Test Suite
        if: ${{ always() && contains(inputs.EXTENSIONS, 'pyxem') }}
        working-directory: ${{ runner.temp }}
        run: |
          python -m pytest --pyargs pyxem

      - name: Run holospy Test Suite
        if: ${{ always() && contains(inputs.EXTENSIONS, 'holospy') }}
        working-directory: ${{ runner.temp }}
        run: |
          python -m pytest --pyargs holospy

      - name: Run exSpy Test Suite
        if: ${{ always() && contains(inputs.EXTENSIONS, 'exspy') }}
        working-directory: ${{ runner.temp }}
        run: |
          python -m pytest --pyargs exspy

      - name: Run kikuchipy Test Suite
        if: ${{ always() && contains(inputs.EXTENSIONS, 'kikuchipy') }}
        working-directory: ${{ runner.temp }}
        run: |
          # https://github.com/pyxem/kikuchipy/issues/707
          python -m pytest --pyargs kikuchipy -k "not test_not_allow_download_raises"

      - name: Run etspy Test Suite
        if: ${{ always() && contains(inputs.EXTENSIONS, 'etspy') }}
        working-directory: ${{ runner.temp }}
        run: |
          python -m pytest --pyargs etspy

      - name: Run atomap Test Suite
        if: ${{ always() && contains(inputs.EXTENSIONS, 'atomap') }}
        working-directory: ${{ runner.temp }}
        run: |
          python -m pytest --pyargs atomap -k "not test_gui_function_qt"
